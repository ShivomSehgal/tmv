<resources>
    <string name="app_name">project</string>
    <string name="send_button_label">Send</string>
    <string name="sign_out">sign out</string>
    <string name="Operating_System"><a href="https://www.sanfoundry.com/operating-system-questions-answers/">Operating System</a></string>
    >


    <!-- Label for overflow menu option that inserts fake pet data into the app [CHAR LIMIT=20] -->
    <string name="action_insert_dummy_data">Insert Dummy Data</string>

    <!-- Label for overflow menu option that deletes all pet data in the app [CHAR LIMIT=20] -->
    <string name="action_delete_all_entries">Delete All Pets</string>

    <!-- Title for the activity to add a new pet [CHAR LIMIT=20] -->
    <string name="editor_activity_title_new_pet">Add a Pet</string>

    <!-- Label for editor menu option to save pet and leave editor [CHAR LIMIT=20] -->
    <string name="action_save">Save</string>

    <!-- Label for editor overflow menu option that deletes the current pet [CHAR LIMIT=20] -->
    <string name="action_delete">Delete</string>

    <!-- Label for overview category of attributes in the editor [CHAR LIMIT=30] -->
    <string name="category_overview">Overview</string>

    <!-- Label for gender information in the editor [CHAR LIMIT=30] -->
    <string name="category_gender">Gender</string>

    <!-- Label for measurement information in the editor [CHAR LIMIT=30] -->
    <string name="category_measurement">Measurement</string>

    <!-- Text hint for name field in the editor [CHAR LIMIT=30] -->
    <string name="hint_pet_name">Name</string>

    <!-- Text hint for breed field in the editor [CHAR LIMIT=30] -->
    <string name="hint_pet_breed">Breed</string>

    <!-- Text hint for name field in the editor [CHAR LIMIT=30] -->
    <string name="hint_pet_weight">Weight</string>

    <!-- Units for weight of the pet (kilograms) [CHAR LIMIT=5] -->
    <string name="unit_pet_weight">kg</string>

    <!-- Label for dropdown menu option if the pet's gender is unknown [CHAR LIMIT=20] -->
    <string name="task_not_done">Task Not Done</string>

    <!-- Label for dropdown menu option if the pet is male [CHAR LIMIT=20] -->
    <string name="task_complete">Task Completed</string>

    <!-- Label for dropdown menu option if the pet is female [CHAR LIMIT=20] -->
    <string name="task_incomplete">Task Incomplete</string>


    <string name="threeHours">3 hours</string>
    <string name="fiveHours">5 hours</string>
    <string name="sevenHours">7 hours</string>

    <string name="data_analysis">
from optparse import Option \n
import justpy as jp \n
import pandas \n
from datetime import datetime \n
from pytz import utc \n
import matplotlib.pyplot as plt \n

data= pandas.read_csv("reviews.csv", parse_dates=["Timestamp"])\n
# data["Day"] = data["Timestamp"].dt.data \n
# day_avg = data.groupby(["Day"]).mean()\n
data["Month"] = data["Timestamp"].dt.strftime("%Y-%m")\n
month_avg = data.groupby(["Month","Course Name"])["Rating"].count().unstack() \n
        \n
        \n

chart_def = """

 {


    chart: {
        type: 'streamgraph',
        marginBottom: 30,
        zoomType: 'x'
    },



    title: {
        floating: true,
        align: 'left',
        text: 'Winter Olympic Medal Wins'
    },
    subtitle: {
        floating: true,
        align: 'left',
        y: 30,

    },

    xAxis: {
        maxPadding: 0,
        type: 'category',
        crosshair: true,
        categories: [],
        labels: {
            align: 'left',
            reserveSpace: false,
            rotation: 270
        },
        lineWidth: 0,
        margin: 20,
        tickWidth: 0
    },

    yAxis: {
        visible: false,
        startOnTick: false,
        endOnTick: false
    },

    legend: {
        enabled: false
    },

    annotations: [{
        labels: [{
            point: {
                x: 5.5,
                xAxis: 0,
                y: 30,
                yAxis: 0
            },
            text: ''
        }, {
            point: {
                x: 18,
                xAxis: 0,
                y: 90,
                yAxis: 0
            },
            text: ''
        }],
        labelOptions: {
            backgroundColor: 'rgba(255,255,255,0.5)',
            borderColor: 'silver'
        }
    }],

    plotOptions: {
        series: {
            label: {
                minFontSize: 5,
                maxFontSize: 15,
                style: {
                    color: 'rgba(255,255,255,0.75)'
                }
            }
        }
    },

    // Data parsed with olympic-medals.node.js
    series: [{
        name: "Finland",
        data: [
            0, 11, 4, 3, 6, 0, 0, 6, 9, 7, 8, 10, 5, 5, 7, 9, 13, 7, 7, 6, 12, 7, 9, 5, 5
        ]
    }, {
        name: "Austria",
        data: [
            0, 3, 4, 2, 4, 0, 0, 8, 8, 11, 6, 12, 11, 5, 6, 7, 1, 10, 21, 9, 17, 17, 23, 16, 17
        ]
    }, {
        name: "Sweden",
        data: [
            0, 2, 5, 3, 7, 0, 0, 10, 4, 10, 7, 7, 8, 4, 2, 4, 8, 6, 4, 3, 3, 7, 14, 11, 15
        ]
    }, {
        name: "Norway",
        data: [
            0, 17, 15, 10, 15, 0, 0, 10, 16, 4, 6, 15, 14, 12, 7, 10, 9, 5, 20, 26, 25, 25, 19, 23, 26
        ]
    }, {
        name: "U.S.",
        data: [
            0, 4, 6, 12, 4, 0, 0, 9, 11, 7, 10, 7, 7, 8, 10, 12, 8, 6, 11, 13, 13, 34, 25, 37, 28
        ]
    }, {
        name: "East Germany",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 14, 19, 23, 24, 25, 0, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "West Germany",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 10, 5, 4, 8, 0, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "Germany",
        data: [
            0, 0, 1, 2, 6, 0, 0, 0, 7, 2, 8, 9, 0, 0, 0, 0, 0, 0, 26, 24, 29, 36, 29, 30, 19
        ]
    }, {
        name: "Netherlands",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 9, 9, 6, 4, 0, 7, 4, 4, 11, 8, 9, 8, 24
        ]
    }, {
        name: "Italy",
        data: [
            0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 1, 4, 4, 5, 4, 2, 2, 5, 14, 20, 10, 13, 11, 5, 8
        ]
    }, {
        name: "Canada",
        data: [
            0, 1, 1, 7, 1, 0, 0, 3, 2, 3, 4, 3, 3, 1, 3, 2, 4, 5, 7, 13, 15, 17, 24, 26, 25
        ]
    }, {
        name: "Switzerland",
        data: [
            0, 3, 1, 1, 3, 0, 0, 10, 2, 6, 2, 0, 6, 10, 5, 5, 5, 15, 3, 9, 7, 11, 14, 9, 11
        ]
    }, {
        name: "Great Britain",
        data: [
            0, 4, 1, 0, 3, 0, 0, 2, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 2, 1, 2, 1, 1, 4
        ]
    }, {
        name: "France",
        data: [
            0, 3, 1, 1, 1, 0, 0, 5, 1, 0, 3, 7, 9, 3, 1, 1, 3, 2, 9, 5, 8, 11, 9, 11, 15
        ]
    }, {
        name: "Hungary",
        data: [
            0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "Unified Team",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "Soviet Union",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21, 25, 13, 16, 27, 22, 25, 29, 0, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "Russia",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 18, 13, 22, 15, 33
        ]
    }, {
        name: "Japan",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 1, 1, 1, 7, 5, 10, 2, 1, 5, 8
        ]
    }, {
        name: "Czechoslovakia",
        data: [
            0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 4, 3, 1, 1, 6, 3, 3, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "Poland",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 6, 6
        ]
    }, {
        name: "Spain",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "China",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 8, 8, 11, 11, 9
        ]
    }, {
        name: "South Korea",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 6, 4, 11, 14, 8
        ]
    }, {
        name: "Czech Republic",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 6, 8
        ]
    }, {
        name: "Belarus",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 3, 6
        ]
    }, {
        name: "Kazakhstan",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 1, 1
        ]
    }, {
        name: "Bulgaria",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 3, 1, 0, 0
        ]
    }, {
        name: "Denmark",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0
        ]
    }, {
        name: "Ukraine",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 2, 0, 2
        ]
    }, {
        name: "Australia",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3
        ]
    }, {
        name: "Belgium",
        data: [
            0, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0
        ]
    }, {
        name: "Romania",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "Liechtenstein",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "Yugoslavia",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "Luxembourg",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "New Zealand",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "North Korea",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
        ]
    }, {
        name: "Slovakia",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 1
        ]
    }, {
        name: "Croatia",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 3, 1
        ]
    }, {
        name: "Slovenia",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0, 3, 8
        ]
    }, {
        name: "Latvia",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4
        ]
    }, {
        name: "Estonia",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0
        ]
    }, {
        name: "Uzbekistan",
        data: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0
        ]
    }],

    exporting: {
        sourceWidth: 800,
        sourceHeight: 600
    }

}
"""
        \n \n
def app():\n
    wp=jp.QuasarPage() \n
    h1=jp.QDiv(a=wp, text="Welcome to Data Analysis", classes= "text-h1 text-center q-pd-md") \n
    # p1=jp.QDiv(a=wp, text="Analysis of Course Reviews") \n
    hc=jp.HighCharts(a=wp, options=chart_def) \n
    hc.options.title.text = "Average Rating by Month" \n
    hc.options.xAxis.categories = list(month_avg.index) \n
    # hc.options.series[0].data = list(month_avg["Rating"]) \n
    hc_data = [{"name":v1, "data":[v2 for v2 in month_avg[v1]]} for v1 in month_avg.columns] \n
    hc.options.series = hc_data \n
    return wp \n
 \n
jp.justpy(app)    </string>

    <string name="operating_System"><a href="https://www.sanfoundry.com/operating-system-questions-answers/">mcq</a></string>
    >
    <string name="operating_SystemCs"><a href="https://whimsical.com/operating-system-cheatsheet-by-love-babbar-S9tuWBCSQfzoBRF5EDNinQ">Cheat-Sheet</a></string>
    >
    <string name="databaseCn"><a href="https://whimsical.com/dbms-roadmap-by-love-babbar-FmUi8ffVop33t3MmpVxPCo">Cheat-sheett</a></string>
    >
    <string name="database"><a href="https://www.sanfoundry.com/1000-database-management-system-questions-answers/">mcq</a></string>
    >
    <string name="data_structures_algo"><a href="https://www.sanfoundry.com/1000-data-structure-questions-answers/">Data structures and Algorithms</a></string>
    >
    <string name="mcqCn"><a href="https://www.sanfoundry.com/computer-network-questions-answers/">MCQS</a></string>
    >
    <string name="cheatsheetCn"><a href="https://whimsical.com/networking-cheatsheet-by-love-babbar-FcLExFDezehhfsbDPfZDBv">Cheat-Sheet</a></string>
    <string name="object_oriented"><a href="https://www.interviewbit.com/oops-interview-questions/">mcq</a></string>
    >
    <string name="object_orientedCn"><a href="https://whimsical.com/object-oriented-programming-cheatsheet-by-love-babbar-YbSgLatbWQ4R5paV7EgqFw">cheat-sheet</a></string>
    >
    <string name="Reverse_Level_Order_Traversal">
        <a href="https://practice.geeksforgeeks.org/problems/reverse-level-order-traversal/1">Reverse Level Order Traversal</a>
    </string>
    <string name="Level_Order_Traversal">
        <a href="https://practice.geeksforgeeks.org/problems/level-order-traversal/1"> Level Order Traversal</a>
    </string>
    <string name="LeftView">
        <a href="https://practice.geeksforgeeks.org/problems/left-view-of-binary-tree/1"> Left View of Binary Tree</a>
    </string>
    <string name="RightView">
        <a href="https://practice.geeksforgeeks.org/problems/right-view-of-binary-tree/1"> Right View of Binary Tree</a>
    </string>
    <string name="TopView">
        <a href="https://practice.geeksforgeeks.org/problems/top-view-of-binary-tree/1"> Top View of Binary Tree </a>
    </string>
    <string name="BottomView">
        <a href="https://practice.geeksforgeeks.org/problems/bottom-view-of-binary-tree/1"> Bottom View of Binary Tree</a>
    </string>

    <string name="ZigZag">
        <a href="https://practice.geeksforgeeks.org/problems/zigzag-tree-traversal/1"> Zig Zag Traversal</a>
    </string>
    <string name="Sum_of_longest_bloodline">
        <a href="https://practice.geeksforgeeks.org/problems/sum-of-the-longest-bloodline-of-a-tree/1"> Sum of Longest Bloodline</a>
    </string>
    <string name="Lowest_common_ancestor">
        <a href="https://practice.geeksforgeeks.org/problems/lowest-common-ancestor-in-a-binary-tree/1">Lowest Common Ancestor</a>
    </string>
    <string name="Height">
        <a href="https://www.geeksforgeeks.org/write-a-c-program-to-find-the-maximum-depth-or-height-of-a-tree/"> Height of Binary Tree</a>
    </string>

    <string name="Diameter">
        <a href="https://practice.geeksforgeeks.org/problems/diameter-of-binary-tree/1/"> Diameter of the Binary Tree</a>
    </string>
    <string name="Vertical">
        <a href="https://www.geeksforgeeks.org/print-binary-tree-vertical-order/"> Vertical View of Binary Tree</a>
    </string>
    <string name="SerDeserialize">
        <a href="https://www.geeksforgeeks.org/serialize-deserialize-binary-tree/"> Serialize and Deserialize </a>
    </string>


</resources>